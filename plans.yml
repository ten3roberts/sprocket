Graphics:
    - Material
    - Proper renderer
    - Color type (4 byte vector)
    - Make resourcemanager handle swapchain
    - Descriptor pool management
    - Commandbuffer to only bind material if it is not already bound
    - Renderpasses shoudln't be determined on a per material basis. Let renderer be in charge of renderpasses and make pipelines agnostic to renderpasses
    - Shadows, a separate renderpass with pipelines composed of a special fragment shader and the usual vertex shader for the pipeline

Systems:
    - Desc: 
      Introduce systems that run asynchronously on different threads
      Entities are defined by several components that have the same entity
      Each system has its own entities
      When a change is made, it is sent across a channel as an event to the application, which then relays it to each  other system that subscribed for that event
    - Renderer:
      Stores mesh, material, and uniform data
      Relies on Subsystems to update the uniform data for each entity

    - Physics:
      Does all physics calculations
      Sends changed entities via a channel to the application that then relays it to the renderer which updates the position

Systems:
    - Each component is only data and can exist simultaneously on different threads
    - When a component needs some other component it is pulled from the system
    - If it is mutated a dirty flag is set
    - At the end of a systems tick, all dirty components are sent across a channel to the application
    - The application relays the changed components to all other systems
    - Examples:
        - Script in physics system requests a Text component by a handle as mutable
        - The system returns the text component stored locally, or None
        - The system sets a dirty bit for the component
        - The script changes the text stored in the Text component
        - The system tick ends
        - System sends the new Text object along with other mutated components in a channel to application
        - The application gets the message and sends it to the renderer system
        - The renderer receives the new Text object and replaces the old one
        - The renderer does a tick and calls update on the Text object, which returns a Mesh to display

ECS:
    Non-serializable components:
        Since Materials, Renderpasses, Meshes and alike can't be serialized they can't be made into components that live across threads
        The solution for this is to make the Component version them be a description of them, E.g; a MaterialComponent is only a wrapper of a string that describes the path to the material
        When the component is sent to the Render thread it is resolved by the resource manager into an actual material, which is only reference counted in the renderer
        This also means that entities that aren't renderer aren't going to use graphics memory by materials they have

    MeshComponent:
        Meshes can represent either a string to a path or a Vec of vertices and indices, that are then created when resolved in the renderer
Bugs:
    - vkDeviceWaitIdle locks on repeated calls when resizing several times in a frame. Only happens on Linux with Nvidia

Materials:
    - Holds the pipeline(shaders)
    - Holds descriptor set (1) which can include anything from textures to uniform buffers, but are global to the material
